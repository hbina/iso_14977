// The syntax of Extended BNF can be defined using
// itself. There are four parts in this example,
// the first part names the characters, the second
// part defines the removal of unnecessary nonprinting characters, the third part defines the
// removal of textual comments, and the final part
// defines the structure of Extended BNF itself.
// Each syntax rule in this example starts with a
// comment that identifies the corresponding clause
// in the standard.
// The meaning of special-sequences is not defined
// in the standard. In this example (see the
// reference to 7.6) they represent control
// functions defined by ISO/IEC 6429:1992.
// Another special-sequence defines a
// syntactic-exception (see the reference to 4.7).

// The first part of the lexical syntax defines the
// characters in the 7-bit character set (ISO/IEC
// 646:1991) that represent each terminal-character
// and gap-separator in Extended BNF.

// The representation of the following
// terminal-characters is defined in clauses 7.3,
// 7.4 and tables 1, 2.
concatenate_symbol = { "," }
defining_symbol = { "=" }
definition_separator_symbol = {
    "|" 
    | "//" 
    | "!"
}
end_comment_symbol = { "*)" }
end_group_symbol = { ")" }
end_option_symbol = {
    "]"
    | "/)"
}
end_repeat_symbol = {
    "}"
    | ":)"
}
except_symbol = { "-" }
first_quote_symbol = { "'" }
repetition_symbol = { "*" }
second_quote_symbol = { "\"" }
special_sequence_symbol = { "?" }
start_comment_symbol = { "(*" }
start_group_symbol = { "(" }
start_option_symbol = {
    "["
    | "(/"
}
start_repeat_symbol = {
    "{"
    | "(:"
}
terminator_symbol = {
    ";"
    | "."
}

// see 7.6
space_character = { " " }

// ISO 6429 character Carriage Return
carriage_return = { "\r" }

// ISO 6429 character Horizontal Tabulation
horizontal_tabulation_character = { "\t" }

// ISO 6429 character Vertical Tabulation
vertical_tabulation_character = {
    "\\v" 
    | "\u{000B}"
}

// ISO 6429 character Form Feed
form_feed = { "\\f" }

// this is a helper to properly defined other_character for all of Unicode
other_terminal_character = {
    ASCII_ALPHA
    | ASCII_DIGIT
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    | first_quote_symbol
    | repetition_symbol
    | second_quote_symbol
    | special_sequence_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
}

// see 7.5
other_character = {
    !other_terminal_character ~ ANY
}

terminal_character = {
    other_terminal_character
    | other_character
}

// see 4.16
terminal_string = @{
    (first_quote_symbol ~ (first_terminal_character)+ ~ first_quote_symbol)
    | (second_quote_symbol ~ (second_terminal_character)+ ~ second_quote_symbol)
}

// See 4.17
first_terminal_character = { 
    !(first_quote_symbol) ~ terminal_character
 }

// See 4.18
second_terminal_character = { 
    !(second_quote_symbol) ~ terminal_character
}

// See 4.9
integer = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

// See 4.14
meta_identifier = @{ ASCII_ALPHA ~ (space_character? ~ meta_identifier_character)* }

// See 4.15
meta_identifier_character = _{
    ASCII_ALPHA
    | ASCII_DIGIT
    | "_"
}

// See 4.19
special_sequence = {
    special_sequence_symbol ~ (special_sequence_character)* ~ special_sequence_symbol
}

// See 4.20
special_sequence_character = {
    ASCII_ALPHA
    | ASCII_DIGIT
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    | first_quote_symbol
    | repetition_symbol
    | second_quote_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    | other_character
}

// See 4.21
empty_sequence = {
    ""
}

// The final part of the syntax defines the
// abstract syntax of Extended BNF, i.e. the
// structure in terms of the comment-less symbols.

// See 4.3
syntax_rule = {
    meta_identifier ~ defining_symbol ~ definition_list ~ terminator_symbol
}

// See 4.4
definition_list = {
    single_definition ~ (definition_separator_symbol ~ single_definition)*
}

// See 4.5
single_definition = {
    syntactic_term ~ (concatenate_symbol ~ syntactic_term)*
}

// See 4.6
syntactic_term = {
    syntactic_factor ~ (except_symbol ~ syntactic_exception)?
}

// See 4.8
syntactic_factor = {
    (integer ~ repetition_symbol)? ~ syntactic_primary
}

// See 4.7
// NOTE: syntactic_exception must be checked ourselves.
syntactic_exception = {
    syntactic_factor
}

// See 4.10
syntactic_primary = {
    optional_sequence 
    | repeated_sequence
    | grouped_sequence
    | meta_identifier
    | terminal_string
    | special_sequence
    | empty_sequence
}

// See 4.11
optional_sequence = {
    start_option_symbol ~ definition_list ~ end_option_symbol
}

// See 4.12
repeated_sequence = {
    start_repeat_symbol ~ definition_list ~ end_repeat_symbol
}

// See 4.13
grouped_sequence = {
    start_group_symbol ~ definition_list ~ end_group_symbol
}

// See 4.2
syntax = {
    SOI ~ syntax_rule+ ~ EOI
}

// See chapter 6.4 on Gap Separators
WHITESPACE = _{ " " | NEWLINE | "\t" | "\u{000B}" }
COMMENT = _{ "(*" ~ (!"*)" ~ ANY)* ~ "*)" }
